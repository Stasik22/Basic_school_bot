import time
from math import lgamma

import telebot as tb

from datetime import datetime
from Notes import  notes_save
from Notes import  notes_data
from Buttons import start_button_func, schedule_buttons, notes_button
from Buttons import class_num
from Schedule import scheule_11C, schedule_11A, schedule_11B, schedule_11G, schedule_10A, schedule_10B, schedule_10C, schedule_10G, schedule_9A, schedule_9B, schedule_5C, schedule_5A, schedule_6A, schedule_7A,schedule_5B, schedule_6C, schedule_5G ,schedule_8A, schedule_6B, schedule_7B,schedule_8B, schedule_7C, schedule_6G, schedule_7G, schedule_8C, schedule_9C, schedule_8G, schedule_9G
from Buttons import des
from Buttons import site_buttons
from Buttons import app_buttons


API_TOKEN = ''
bot = tb.TeleBot(API_TOKEN)

url = "https://www.reddit.com"


@bot.message_handler(commands=["start"])
def start_function(message):
    bot.send_message(message.chat.id, "<b>–í—Å—ñ—Ö –≤—ñ—Ç–∞—é!–¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ª—ñ—Ü–µ—é 5 –≤ –£–∂–≥–æ—Ä–æ–¥—ñ.</b>", parse_mode="html",reply_markup=start_button_func())

@bot.message_handler(func=lambda message: message.text in ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫"])
def quit(message):
    bot.send_message(message.chat.id, "<b>–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫</b>", parse_mode="html", reply_markup=start_button_func())

@bot.message_handler(func=lambda message: message.text in ["–î–æ–¥–∞—Ç–æ–∫"])
def app (message):
    bot.send_message(message.chat.id, "<b>–û—Å—å –Ω–∞—à –¥–æ–¥–∞—Ç–æ–∫.–í–∏–±–µ—Ä—ñ—Ç—å –û–° —è–∫–æ—é –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –∑–∞–¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É</b>", parse_mode="html", reply_markup = app_buttons())


@bot.message_handler(func=lambda message: message.text in ["–ù–∞—à —Å–∞–π—Ç"])
def app(message):
    bot.send_message(message.chat.id,"<b>–¶–µ –Ω–∞—à —Å–∞–π—Ç</b>",parse_mode="html", reply_markup=site_buttons())


@bot.message_handler(func=lambda message: message.text in ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫"])
def notes(message):
    bot.send_message(message.chat.id, "<b>–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –ø–æ–¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π</b>", parse_mode="html", reply_markup=start_button_func())

@bot.message_handler(func=lambda message: message.text in ["–ù–æ—Ç–∞—Ç–∫–∏"])
def notes(message):
        chat_id = str(message.chat.id)
        user_notes = notes_data.get(chat_id, [])

        if isinstance(user_notes, list):
            notes_text = "\n".join(f"{i + 1}. {note.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–æ—Ç–∞—Ç–∫–∞')} (üìÖ {note.get('date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞')})" for i, note in enumerate(user_notes) if isinstance(note, dict))
            bot.send_message(chat_id, f"f<b>–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏</b>\n{notes_text}" if notes_text else "<b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫</b>", parse_mode="html" ,reply_markup=notes_button())
        else:
            bot.send_message(chat_id, "<b>–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ—Ç–∞—Ç–æ–∫</b>", parse_mode="html", reply_markup=notes_button())


@bot.message_handler(func=lambda message: message.text in ["–°—Ç–≤–æ—Ä–∏—Ç–∏"])
def create_note(message):
    bot.send_message(message.chat.id, "<b>–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –Ω–æ—Ç–∞—Ç–∫—É:</b>", parse_mode="html")
    bot.register_next_step_handler(message, save_note)

def  save_note(message):
    chat_id = str(message.chat.id)
    note_text = message.text.strip()

    if note_text:
        note_entry = {"text": note_text, "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
        notes_data.setdefault(chat_id, []).append(note_entry)
        notes_save(notes_data)
        bot.send_message(chat_id, "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", parse_mode="html", reply_markup=notes_button())
    else:
        bot.send_message(chat_id, "‚ùå –ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!", parse_mode="html")

@bot.message_handler(func=lambda message: message.text in ["–û—á–∏—Å—Ç–∏—Ç–∏"])
def clear_notes(message):
        chat_id = str(message.chat.id)
        if chat_id in notes_data:
            del notes_data[chat_id]
            notes_save(notes_data)
            bot.send_message(chat_id, "üóëÔ∏è<b>–ù–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫,–æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ</b>",parse_mode="html", reply_markup=notes_button())
        else:
            bot.send_message(chat_id, "‚ùó<b>–£Ô∏è –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>", parse_mode="html")
        pass


@bot.message_handler(func=lambda message: message.text in ["–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å"])
def view_notes(message):
        chat_id = str(message.chat.id)
        user_notes = notes_data.get(chat_id, [])


        if isinstance(user_notes, list):
            notes_text = "\n".join(f"{i + 1}. {note.get('text', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–æ—Ç–∞—Ç–∫–∞')} (üìÖ {note.get('date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞')})" for i, note in enumerate(user_notes) if isinstance(note, dict))
            bot.send_message(chat_id, f"<b>–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:</b>\n{notes_text}" if notes_text else "<b>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.</b>",parse_mode="html")
        else:
            bot.send_message(chat_id,"<b>‚ÄΩ–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ—Ç–∞—Ç–æ–∫</b>",reply_markup=notes_button(), parse_mode="html")
        return view_notes

@bot.message_handler(func=lambda message: message.text == "–í–∏–π—Ç–∏")
def quite(message):
        bot.send_message(message.chat.id, "<b>–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –ø–æ–¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π</b>", reply_markup=start_button_func(), parse_mode="html")


@bot.message_handler(func=lambda message: message.text in ["–î–æ–º–∞—à–Ω—è —Ä–æ–±–æ—Ç–∞"])
def homework(message):
    bot.send_message(message.chat.id, "<b>–û—Å—å –≤–∞—à–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è</b>", parse_mode="html")


@bot.message_handler(func=lambda message: message.text in ["–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤"])
def schedule(message):
    bot.send_message(message.chat.id,"<b>–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –∫–ª–∞—Å –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ,—â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥</b>",parse_mode="html",reply_markup=schedule_buttons())


user_states11 = {}


@bot.message_handler(func=lambda message: message.text == "11 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states11[chat_id] = {"grade": "11"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states11 and user_states11[chat_id].get("grade") == "11":
        selected_letter = message.text
        user_states11[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states11.get(chat_id)

    if not user_info or user_info.get("grade") != "11":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_11A,
            "–ë": schedule_11B,
            "–í": scheule_11C,
            "–ì": schedule_11G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")

user_states10 ={}

@bot.message_handler(func=lambda message: message.text == "10 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states10[chat_id] = {"grade": "10"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states10 and user_states10[chat_id].get("grade") == "10":
        selected_letter = message.text
        user_states10[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states10.get(chat_id)

    if not user_info or user_info.get("grade") != "10":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_10A,
            "–ë": schedule_10B,
            "–í": schedule_10C,
            "–ì": schedule_10G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")


user_states9 = {}

@bot.message_handler(func=lambda message: message.text == "9 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states9[chat_id] = {"grade": "9"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states9 and user_states9[chat_id].get("grade") == "9":
        selected_letter = message.text
        user_states9[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states9.get(chat_id)

    if not user_info or user_info.get("grade") != "9":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_9A,
            "–ë": schedule_9B,
            "–í": schedule_9C,
            "–ì": schedule_9G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")

user_states8 = {}

@bot.message_handler(func=lambda message: message.text == "8 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states8[chat_id] = {"grade": "8"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states8 and user_states8[chat_id].get("grade") == "8":
        selected_letter = message.text
        user_states8[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states8.get(chat_id)

    if not user_info or user_info.get("grade") != "8":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_8A,
            "–ë": schedule_8B,
            "–í": schedule_8C,
            "–ì": schedule_8G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")

user_states7 = {}

@bot.message_handler(func=lambda message: message.text == "7 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states7[chat_id] = {"grade": "7"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states7 and user_states7[chat_id].get("grade") == "11":
        selected_letter = message.text
        user_states7[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states7.get(chat_id)

    if not user_info or user_info.get("grade") != "11":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_7A,
            "–ë": schedule_7B,
            "–í": schedule_7C,
            "–ì": schedule_7G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")

user_states6 = {}

@bot.message_handler(func=lambda message: message.text == "6 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states6[chat_id] = {"grade": "6"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states6 and user_states6[chat_id].get("grade") == "6":
        selected_letter = message.text
        user_states6[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states6.get(chat_id)

    if not user_info or user_info.get("grade") != "6":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_6A,
            "–ë": schedule_6B,
            "–í": schedule_6C,
            "–ì": schedule_6G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")

user_states5 = {}

@bot.message_handler(func=lambda message: message.text == "5 –∫–ª–∞—Å")
def choose_class_letter(message):
    chat_id = message.chat.id
    user_states5[chat_id] = {"grade": "5"}
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å –ª—ñ—Ç–µ—Ä—É –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É</b>", parse_mode="html", reply_markup=class_num())


@bot.message_handler(func=lambda message: message.text in ["–ê", "–ë", "–í", "–ì"])
def select_class_letter(message):
    chat_id = message.chat.id
    if chat_id in user_states5 and user_states5[chat_id].get("grade") == "5":
        selected_letter = message.text
        user_states5[chat_id]["letter"] = selected_letter
        bot.send_message(chat_id,f"<b>–í–∏ –æ–±—Ä–∞–ª–∏ –ª—ñ—Ç–µ—Ä—É {selected_letter}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥:</b>", parse_mode="html", reply_markup=des())


@bot.message_handler(func=lambda message: message.text in ["–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"])
def send_schedule(message):
    chat_id = message.chat.id
    user_info = user_states5.get(chat_id)

    if not user_info or user_info.get("grade") != "5":
        bot.send_message(chat_id, "<b>–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</b>", parse_mode="html")
        return

    letter = user_info.get("letter")

    if message.text == "–¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç":
        schedules = {
            "–ê": schedule_5A,
            "–ë": schedule_5B,
            "–í": schedule_5C,
            "–ì": schedule_5G,
        }
        schedule_text = schedules.get(letter)
        if schedule_text:
            bot.send_message(chat_id, schedule_text, parse_mode="html")
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")

    elif message.text == "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è":
        photos = {
            "–ê": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-13 –æ 22.13.22.png",
            "–ë": "Schedule_photo/–ó–Ω—ñ–º–æ–∫ –µ–∫—Ä–∞–Ω–∞ 2025-05-03 –æ 20.02.24.png",
            "–í": "Schedule_photo/Screenshot 2025-03-22 at 21.44.24.png",
            "–ì": "Schedule_photo/Screenshot 2025-03-24 at 11.09.31.png",
        }
        photo_path = photos.get(letter)
        if photo_path:
            with open(photo_path, "rb") as file:
                bot.send_photo(chat_id, file)
        else:
            bot.send_message(chat_id, "–ù–µ–º–∞—î –ø–æ–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö", parse_mode="html")


    time.sleep(1)
    bot.send_message(chat_id, "<b>–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ–¥–∞–Ω–∏—Ö –Ω–∏–∂—á–µ</b>", reply_markup=start_button_func(), parse_mode="html")


bot.polling(non_stop=True)
